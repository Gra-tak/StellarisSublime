
{
	"scope":"effect fleet",
	"completions":
	[
		{ "trigger": "create_ship_design	Creates a new ship design", "contents": "create_ship_design = {\n\t$1\n }" },
		{ "trigger": "set_owner	Sets the owner of a planet or fleet.", "contents": "set_owner = $1" },
		{ "trigger": "set_fleet_flag	Sets a flag on a fleet", "contents": "set_fleet_flag = $1" },
		{ "trigger": "remove_fleet_flag	Removes a flag from a fleet", "contents": "remove_fleet_flag = $1" },
		{ "trigger": "random_owned_ship	picks a random owned ship", "contents": "random_owned_ship = $1" },
		{ "trigger": "set_location	Sets the location of a fleet.", "contents": "set_location = {\n\t$1\n }" },
		{ "trigger": "create_ship	Creates a new ship", "contents": "create_ship = {\n\t$1\n }" },
		{ "trigger": "set_name	changes the name of a scope target", "contents": "set_name = $1" },
		{ "trigger": "add_modifier	Gives a specific modifier to a planet.", "contents": "add_modifier = {\n\t$1\n }" },
		{ "trigger": "fleet_event	fires a Fleet event", "contents": "fleet_event = {\n\t$1\n }" },
		{ "trigger": "set_variable	Sets a variable value", "contents": "set_variable = {\n\t$1\n }" },
		{ "trigger": "change_variable	Changes a variable value", "contents": "change_variable = {\n\t$1\n }" },
		{ "trigger": "set_event_locked	Locks a fleet actively disabling it to do anything. Remember to unlock.", "contents": "set_event_locked = $1" },
		{ "trigger": "clear_orders	Removes all orders from a fleet.", "contents": "clear_orders = $1" },
		{ "trigger": "order_forced_return	Orders a fleet to move back into safe territory.", "contents": "order_forced_return = $1" },
		{ "trigger": "dismantle	Dismantles a station", "contents": "dismantle = $1" },
		{ "trigger": "queue_actions	Add actions to fleet's action queue", "contents": "queue_actions = {\n\t$1\n }" },
		{ "trigger": "clear_fleet_actions	Clears all fleet actions for fleet on the right side of =", "contents": "clear_fleet_actions = $1" },
		{ "trigger": "kill_leader	Kills leaders of specified types. kill_leader = { type = general type = scientist etc. }", "contents": "kill_leader = {\n\t$1\n }" },
		{ "trigger": "assign_leader	Assigns a leader to either a fleet, army, or pop faction", "contents": "assign_leader = $1" },
		{ "trigger": "set_timed_fleet_flag	Sets a timed flag on a fleet", "contents": "set_timed_fleet_flag = {\n\t$1\n }" },
		{ "trigger": "add_mission_progress	Adds progress to a mission", "contents": "add_mission_progress = $1" },
		{ "trigger": "create_army_transport	Creates a new army in space", "contents": "create_army_transport = {\n\t$1\n }" },
		{ "trigger": "set_spaceport_module	Sets a spaceport module at specified slot", "contents": "set_spaceport_module = {\n\t$1\n }" },
		{ "trigger": "set_spaceport_level	Sets the level of the spaceport", "contents": "set_spaceport_level = $1" },
		{ "trigger": "set_formation_scale	set formation scale on a fleet", "contents": "set_formation_scale = $1" },
		{ "trigger": "set_controller	Sets the controller of a planet", "contents": "set_controller = $1" },
		{ "trigger": "set_timed_ambient_object_flag	Sets a timed flag on a ambient object", "contents": "set_timed_ambient_object_flag = $1" },
		{ "trigger": "set_aggro_range	Sets aggro range on a fleet or a country", "contents": "set_aggro_range = $1" },
		{ "trigger": "set_fleet_stance	Sets the stance of scope fleet. valid stances are aggressive, passive and evasive", "contents": "set_fleet_stance = $1" },
		{ "trigger": "set_aggro_range_measure_from	Sets where aggro range is measured from on a fleet or a country. valid targets: self, return_point", "contents": "set_aggro_range_measure_from = $1" },
		{ "trigger": "unassign_leader	Unassigns a leader from scope", "contents": "unassign_leader = $1" },
		{ "trigger": "exile_leader_as	Exiles a leader and saves him associated to a custom name", "contents": "exile_leader_as = $1" },
		{ "trigger": "set_leader	Sets a leader from a previously exiled leader associated by a custom name", "contents": "set_leader = $1" },
		{ "trigger": "set_mission	Sets the current mission of an observation station", "contents": "set_mission = $1" },
		{ "trigger": "remove_spaceport_module	Removes a spaceport module from a spaceport. Argument is either a spaceport module slot number or a spaceport module tag", "contents": "remove_spaceport_module = $1" },
		{ "trigger": "hidden_effect	Effect not shown in tooltips", "contents": "hidden_effect = {\n\t$1\n }" },
		{ "trigger": "custom_tooltip	just a tooltip", "contents": "custom_tooltip = {\n\t$1\n }" },
		{ "trigger": "if	a conditional effect", "contents": "if = {\n\t$1\n }" },
		{ "trigger": "random	a random effect", "contents": "random = {\n\t$1\n }" },
		{ "trigger": "random_list	a random effect", "contents": "random_list = {\n\t$1\n }" },
		{ "trigger": "create_species	Creates a new species", "contents": "create_species = {\n\t$1\n }" },
		{ "trigger": "create_country	Creates a new country", "contents": "create_country = {\n\t$1\n }" },
		{ "trigger": "create_fleet	Creates a new fleet", "contents": "create_fleet = {\n\t$1\n }" },
		{ "trigger": "random_country	Picks a random country", "contents": "random_country = $1" },
		{ "trigger": "remove_global_flag	Removes a flag from a country", "contents": "remove_global_flag = $1" },
		{ "trigger": "set_variable	Sets a variable value", "contents": "set_variable = {\n\t$1\n }" },
		{ "trigger": "change_variable	Changes a variable value", "contents": "change_variable = {\n\t$1\n }" },
		{ "trigger": "set_global_flag	Sets a global flag", "contents": "set_global_flag = $1" },
		{ "trigger": "every_country	fires a Country event", "contents": "every_country = $1" },
		{ "trigger": "every_ship	fires a Ship event", "contents": "every_ship = $1" },
		{ "trigger": "every_planet	Executes on every planet", "contents": "every_planet = $1" },
		{ "trigger": "save_event_target_as	save an event target", "contents": "save_event_target_as = $1" },
		{ "trigger": "save_global_event_target_as	save a global event target", "contents": "save_global_event_target_as = $1" },
		{ "trigger": "clear_global_event_target	clear a global event target", "contents": "clear_global_event_target = $1" },
		{ "trigger": "clear_global_event_targets	clear all global event targets", "contents": "clear_global_event_targets = $1" },
		{ "trigger": "break	break execution of effects", "contents": "break = $1" },
		{ "trigger": "while	repeats contained effects until limit fails or count is reached", "contents": "while = {\n\t$1\n }" },
		{ "trigger": "destroy_fleet	Destroys fleet on the right side of =", "contents": "destroy_fleet = $1" },
		{ "trigger": "create_ambient_object	Creates a new ambient object of type <type> at location <location>", "contents": "create_ambient_object = {\n\t$1\n }" },
		{ "trigger": "destroy_ambient_object	Destroys an ambient object", "contents": "destroy_ambient_object = $1" },
		{ "trigger": "set_timed_global_flag	Sets a timed global flag", "contents": "set_timed_global_flag = {\n\t$1\n }" },
		{ "trigger": "switch	Switches effect based on triggers", "contents": "switch = {\n\t$1\n }" },
		{ "trigger": "closest_system	switches scope to closest system that passes limit", "contents": "closest_system = $1" },
		{ "trigger": "random_planet	Executes on a random planet", "contents": "random_planet = $1" },
		{ "trigger": "random_system	Picks a random system", "contents": "random_system = $1" },
		{ "trigger": "every_rim_system	Executes on every system on the galactic rim", "contents": "every_rim_system = $1" },
		{ "trigger": "random_rim_system	Executes on a random system on the galactic rim", "contents": "random_rim_system = $1" },
		{ "trigger": "random_ambient_object	executes effects on every ambient object that passes limit", "contents": "random_ambient_object = $1" },
		{ "trigger": "every_ambient_object	executes effects on every ambient object that passes limit", "contents": "every_ambient_object = $1" }
	]
}