
{
	"scope":"condition planet",
	"completions":
	[
		{ "trigger": "has_ring	Checks if a planet has a ring or not (bool)", "contents": "has_ring = $1" },
		{ "trigger": "has_owner	checks if a planet is colonized", "contents": "has_owner = $1" },
		{ "trigger": "is_moon	checks if a planet is a moon", "contents": "is_moon = $1" },
		{ "trigger": "any_pop	switches scope to and goes through each pop unit on the planet or all pops of the scope species", "contents": "any_pop = $1" },
		{ "trigger": "is_owned_by	checks if a planet or galactic object is owned by target empire", "contents": "is_owned_by = $1" },
		{ "trigger": "is_planet_class	checks if a planet is of a certain class", "contents": "is_planet_class = $1" },
		{ "trigger": "has_strategic_resource	checks if a planet has a specific strategic resource", "contents": "has_strategic_resource = $1" },
		{ "trigger": "is_star_class	checks if a planet star is of a certain class", "contents": "is_star_class = $1" },
		{ "trigger": "distance	Compares the min/max distance to a target with a value", "contents": "distance = {\n\t$1\n }" },
		{ "trigger": "has_planet_modifier	checks if a planet has a planet modifier", "contents": "has_planet_modifier = $1" },
		{ "trigger": "has_planet_flag	checks if a planet has a specified flag", "contents": "has_planet_flag = $1" },
		{ "trigger": "is_capital	checks if a planet is its owners capital", "contents": "is_capital = $1" },
		{ "trigger": "has_ground_combat	checks if a planet has ground combat", "contents": "has_ground_combat = $1" },
		{ "trigger": "num_pops	compares the number of planets on a planet with a value", "contents": "num_pops = $1" },
		{ "trigger": "is_inside_nebula	checks if a planet/ship is inside a nebula", "contents": "is_inside_nebula = $1" },
		{ "trigger": "is_inside_border	checks if a planet/ship/fleet is inside the border of the specified country", "contents": "is_inside_border = $1" },
		{ "trigger": "planet_size	compares the planet size", "contents": "planet_size = {\n\t$1\n }" },
		{ "trigger": "is_star	checks if a planet is a star", "contents": "is_star = $1" },
		{ "trigger": "is_asteroid	checks if a planet is an asteroid", "contents": "is_asteroid = $1" },
		{ "trigger": "is_colonizable	Checks if a planet is colonizable (bool)", "contents": "is_colonizable = $1" },
		{ "trigger": "num_minerals	compares the number of minerals on a planet with a value", "contents": "num_minerals = $1" },
		{ "trigger": "num_physics	compares the number of physics resources on a planet with a value", "contents": "num_physics = $1" },
		{ "trigger": "num_society	compares the number of society resources on a planet with a value", "contents": "num_society = $1" },
		{ "trigger": "num_engineering	compares the number of engineering resources on a planet with a value", "contents": "num_engineering = $1" },
		{ "trigger": "num_modifiers	Compares the number of modifiers on a planet with a value", "contents": "num_modifiers = $1" },
		{ "trigger": "has_any_strategic_resource	Checks whether a planet has any strategic resource (bool)", "contents": "has_any_strategic_resource = $1" },
		{ "trigger": "free_leader_slots	Compares the number of free leader slots", "contents": "free_leader_slots = $1" },
		{ "trigger": "is_occupied_flag	Checks if a planet is under military occupation", "contents": "is_occupied_flag = $1" },
		{ "trigger": "can_colonize	checks if a planet is colonizable by a country's founder species", "contents": "can_colonize = {\n\t$1\n }" },
		{ "trigger": "is_surveyed	Checks if a planet/system as been survey by specified country", "contents": "is_surveyed = {\n\t$1\n }" },
		{ "trigger": "has_global_flag	Checks a global trigger", "contents": "has_global_flag = $1" },
		{ "trigger": "check_variable	Compares the variable value", "contents": "check_variable = {\n\t$1\n }" },
		{ "trigger": "is_colony	checks if a planet is a colony", "contents": "is_colony = $1" },
		{ "trigger": "habitability	Checks for species habitability on current planet", "contents": "habitability = {\n\t$1\n }" },
		{ "trigger": "has_building	checks if a planet or tile has a building", "contents": "has_building = $1" },
		{ "trigger": "is_controlled_by	checks if a planet is controlled by a certain country", "contents": "is_controlled_by = $1" },
		{ "trigger": "is_terraformed	checks if a planet has ever been terraformed", "contents": "is_terraformed = $1" },
		{ "trigger": "is_terraforming	checks if a planet is being terraformed right now", "contents": "is_terraforming = $1" },
		{ "trigger": "has_planet_edict	checks if a planet has an edict", "contents": "has_planet_edict = $1" },
		{ "trigger": "has_observation_outpost	checks if a planet has an observation outpost", "contents": "has_observation_outpost = $1" },
		{ "trigger": "has_mining_station	checks if a planet has a mining station", "contents": "has_mining_station = $1" },
		{ "trigger": "has_research_station	checks if a planet has a research station", "contents": "has_research_station = $1" },
		{ "trigger": "has_spaceport	checks if a planet has a spaceport", "contents": "has_spaceport = $1" },
		{ "trigger": "any_spaceport	any spaceport trigger", "contents": "any_spaceport = $1" },
		{ "trigger": "any_research_station	any research station outpost", "contents": "any_research_station = {\n\t$1\n }" },
		{ "trigger": "any_mining_station	any mining station outpost", "contents": "any_mining_station = $1" },
		{ "trigger": "has_army	checks if a planet has an army", "contents": "has_army = $1" },
		{ "trigger": "count_pops	Counts the amount of pops which fill a requirement and compare it to a number", "contents": "count_pops = {\n\t$1\n }" },
		{ "trigger": "has_anomaly	checks if a planet has a anomaly", "contents": "has_anomaly = $1" },
		{ "trigger": "is_planet	checks if a planet is of the same as the scope", "contents": "is_planet = $1" },
		{ "trigger": "is_ship	checks if a ship is of the same as the scope", "contents": "is_ship = $1" },
		{ "trigger": "has_grown_pop	Checks if a planet or tile has a grown pop", "contents": "has_grown_pop = $1" },
		{ "trigger": "has_growing_pop	Checks if a planet or tile has a growing pop", "contents": "has_growing_pop = $1" },
		{ "trigger": "has_resource	Compares the resources of planet or tile.", "contents": "has_resource = {\n\t$1\n }" },
		{ "trigger": "has_building_construction	checks if a planet or tile has a building construction", "contents": "has_building_construction = $1" },
		{ "trigger": "any_tile	switches scope to and goes through each tile", "contents": "any_tile = $1" },
		{ "trigger": "has_blocker	checks if a planet or tile has a blocker", "contents": "has_blocker = $1" },
		{ "trigger": "free_pop_tiles	compares a value with the amount of free tiles for pops", "contents": "free_pop_tiles = $1" },
		{ "trigger": "free_building_tiles	compares a value with the amount of free tiles for buildings", "contents": "free_building_tiles = $1" },
		{ "trigger": "has_edict	checks if a planet or country has an edict activated", "contents": "has_edict = $1" },
		{ "trigger": "has_moon	checks if a planet has a moon", "contents": "has_moon = $1" },
		{ "trigger": "num_moons	Compares number of moons of planet.", "contents": "num_moons = $1" },
		{ "trigger": "is_in_cluster	checks if a galactic object belongs to a cluster", "contents": "is_in_cluster = $1" },
		{ "trigger": "any_moon	any moon trigger", "contents": "any_moon = $1" },
		{ "trigger": "is_preventing_anomaly	checks if a planet is currently preventing anomalies", "contents": "is_preventing_anomaly = $1" },
		{ "trigger": "observation_outpost_owner	Owner of an observation outpost", "contents": "observation_outpost_owner = $1" },
		{ "trigger": "observation_outpost	observation outpost", "contents": "observation_outpost = $1" },
		{ "trigger": "has_deposit	checks if a tile/planet has a deposit", "contents": "has_deposit = $1" },
		{ "trigger": "has_deposit_for	checks if a tile has a deposit for specific ship class", "contents": "has_deposit_for = $1" },
		{ "trigger": "colony_age	colony age in months compared with a value", "contents": "colony_age = $1" },
		{ "trigger": "is_rim_system	checks if a system is on the galactic rim", "contents": "is_rim_system = $1" },
		{ "trigger": "has_modifier	checks if scope object has a modifier", "contents": "has_modifier = $1" },
		{ "trigger": "is_ringworld	checks if a planet is a ringworld", "contents": "is_ringworld = $1" },
		{ "trigger": "is_ideal_planet_class	Checks if a planet is of ideal class for country", "contents": "is_ideal_planet_class = {\n\t$1\n }" },
		{ "trigger": "sector_controlled	Checks if the planet/fleet is controlled by the sector", "contents": "sector_controlled = $1" },
		{ "trigger": "orbital_bombardment	Checks the orbital bombardment status of a planet", "contents": "orbital_bombardment = {\n\t$1\n }" },
		{ "trigger": "count_deposits	counts number of deposits of given type on planet or tile", "contents": "count_deposits = $1" },
		{ "trigger": "has_point_of_interest	Checks if the scope location has a point of interest", "contents": "has_point_of_interest = {\n\t$1\n }" },
		{ "trigger": "has_orbital_station	checks if a planet has an orbital station", "contents": "has_orbital_station = $1" },
		{ "trigger": "any_orbital_station	any orbital station", "contents": "any_orbital_station = $1" },
		{ "trigger": "count_armies	Counts the amount of armies which fill a requirement and compare it to a number", "contents": "count_armies = $1" },
		{ "trigger": "original_owner	checks if a planet is still owned by first colonizer", "contents": "original_owner = $1" },
		{ "trigger": "is_homeworld	checks if a planet is its owners homeworld", "contents": "is_homeworld = $1" },
		{ "trigger": "is_neighbor_of	Checks if country is neighbors with target", "contents": "is_neighbor_of = $1" },
		{ "trigger": "is_under_colonization	Checks if a planet is being colonized (bool)", "contents": "is_under_colonization = $1" },
		{ "trigger": "has_colony_progress	Checks progress of establishing a colony on planet", "contents": "has_colony_progress = $1" },
		{ "trigger": "is_valid	checks to see if the target of a scope is valid", "contents": "is_valid = $1" },
		{ "trigger": "fortification_health	compares a value with fortification health percentage", "contents": "fortification_health = $1" },
		{ "trigger": "has_spaceport_module	Checks if a spaceport has a module upgrade", "contents": "has_spaceport_module = $1" },
		{ "trigger": "has_free_spaceport_module_slot	Checks if a spaceport has a free module slot", "contents": "has_free_spaceport_module_slot = $1" },
		{ "trigger": "is_spaceport_module_slot_free	Checks if a specific spaceport module slot is free", "contents": "is_spaceport_module_slot_free = $1" },
		{ "trigger": "can_build_spaceport_module	Checks if a spaceport is allowed to build a specific module upgrade", "contents": "can_build_spaceport_module = $1" },
		{ "trigger": "num_free_spaceport_module_slots	Compares the parameter to the amount of free spaceport module slots", "contents": "num_free_spaceport_module_slots = $1" },
		{ "trigger": "num_spaceport_modules	Compares the parameter to the amount of spaceport modules", "contents": "num_spaceport_modules = $1" },
		{ "trigger": "num_energy	compares the number of energy on a planet with a value", "contents": "num_energy = $1" },
		{ "trigger": "is_proposing_war_demands	Checks if currently proposing wardemands or handling existing wardemands", "contents": "is_proposing_war_demands = $1" },
		{ "trigger": "if	a conditional trigger", "contents": "if = {\n\t$1\n }" },
		{ "trigger": "logged_in_to_pdx_account	Checks if the local human is logged in to a Pdx account. This WILL cause an out of sync if used for anything that can change the game state", "contents": "logged_in_to_pdx_account = $1" },
		{ "trigger": "and	all inside trigger must be true", "contents": "and = {\n\t$1\n }" },
		{ "trigger": "or	at least one entry inside trigger must be true", "contents": "or = {\n\t$1\n }" },
		{ "trigger": "not	negates content of trigger", "contents": "not = {\n\t$1\n }" },
		{ "trigger": "hidden_trigger	hides the tooltip for the effects within", "contents": "hidden_trigger = {\n\t$1\n }" },
		{ "trigger": "always	either always false or true", "contents": "always = $1" },
		{ "trigger": "any_country	Trigger Scope for any country", "contents": "any_country = $1" },
		{ "trigger": "any_planet	any planet in a solar system", "contents": "any_planet = $1" },
		{ "trigger": "any_ship	any ship in the game", "contents": "any_ship = $1" },
		{ "trigger": "any_system	any system trigger", "contents": "any_system = $1" },
		{ "trigger": "is_multiplayer	checks if the game is running in multiplayer", "contents": "is_multiplayer = $1" },
		{ "trigger": "exists	checks for object existance", "contents": "exists = $1" },
		{ "trigger": "any_rim_system	switches scope to and goes through each rim system", "contents": "any_rim_system = $1" },
		{ "trigger": "switch	Switches between scopes", "contents": "switch = {\n\t$1\n }" },
		{ "trigger": "any_ship_in_system	any ship in system", "contents": "any_ship_in_system = $1" },
		{ "trigger": "is_same_value	checks if two scopes have the same value", "contents": "is_same_value = $1" },
		{ "trigger": "is_scope_valid	Checks if the current scope is valid", "contents": "is_scope_valid = $1" },
		{ "trigger": "closest_system	switches scope to closest system that passes limit", "contents": "closest_system = $1" },
		{ "trigger": "is_ironman	Check if current game is ironman.", "contents": "is_ironman = $1" },
		{ "trigger": "custom_tooltip_fail	shows custom text when trigger is failing", "contents": "custom_tooltip_fail = {\n\t$1\n }" },
		{ "trigger": "years_passed	compares the number of years that have passed since game start with a value", "contents": "years_passed = $1" },
		{ "trigger": "host_has_dlc	Checks if the host has a certain dlc enabled", "contents": "host_has_dlc = $1" },
		{ "trigger": "local_has_dlc	Checks if the host has a certain dlc enabled", "contents": "local_has_dlc = $1" },
		{ "trigger": "nor	negates content of trigger", "contents": "nor = $1" },
		{ "trigger": "nand	negates content of trigger", "contents": "nand = $1" },
		{ "trigger": "text	shows custom text", "contents": "text = $1" },
		{ "trigger": "custom_tooltip	shows a custom tooltip for the effects within", "contents": "custom_tooltip = {\n\t$1\n }" },
		{ "trigger": "members	compares the number of alliance members", "contents": "members = $1" },
		{ "trigger": "any_ambient_object	any ambient object trigger", "contents": "any_ambient_object = $1" },
		{ "trigger": "any_member	any member in an alliance", "contents": "any_member = $1" }
	]
}