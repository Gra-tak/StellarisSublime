
{
	"scope":"condition country",
	"completions":
	[
		{ "trigger": "any_owned_planet	switches Scope to and goes through each owned planet", "contents": "any_owned_planet = $1" },
		{ "trigger": "any_controlled_planet	switches scope to and goes through each controlled planets", "contents": "any_controlled_planet = $1" },
		{ "trigger": "num_war_demands	compares the number of war demands with a value", "contents": "num_war_demands = $1" },
		{ "trigger": "war_demand_counter	Compares a war demand trigger", "contents": "war_demand_counter = {\n\t$1\n }" },
		{ "trigger": "is_ai	checks if a country is AI controlled", "contents": "is_ai = $1" },
		{ "trigger": "has_trait	checks if an empire's dominant species, pop, or leader has a certain Trait", "contents": "has_trait = $1" },
		{ "trigger": "has_ethic	checks if an empire's dominant species has a certain Ethic", "contents": "has_ethic = $1" },
		{ "trigger": "opinion	Checks this country's opinion value of target country", "contents": "opinion = {\n\t$1\n }" },
		{ "trigger": "is_same_species	checks if a pop or empire is of the same species as another pop or empire", "contents": "is_same_species = $1" },
		{ "trigger": "any_war_defender	switches scope to and goes through each defender in the war against a specified enemy", "contents": "any_war_defender = $1" },
		{ "trigger": "any_war_attacker	switches scope to and goes through each attacker in the war against a specified enemy", "contents": "any_war_attacker = $1" },
		{ "trigger": "ideal_planet_class	Checks the ideal planet class of a target country", "contents": "ideal_planet_class = $1" },
		{ "trigger": "is_same_empire	checks if an empire is the same as another", "contents": "is_same_empire = $1" },
		{ "trigger": "has_technology	checks if a country has a technology of atleast a specific level", "contents": "has_technology = $1" },
		{ "trigger": "has_country_flag	checks if a country has a specified flag", "contents": "has_country_flag = $1" },
		{ "trigger": "is_at_war	checks if a country is at war", "contents": "is_at_war = $1" },
		{ "trigger": "num_owned_planets	compares the number of owned planets in a country with a value", "contents": "num_owned_planets = {\n\t$1\n }" },
		{ "trigger": "has_government	checks if a country has a specified government", "contents": "has_government = $1" },
		{ "trigger": "num_pops	compares the number of planets on a planet with a value", "contents": "num_pops = $1" },
		{ "trigger": "is_primitive	Checks if a country is primitive (bool)", "contents": "is_primitive = $1" },
		{ "trigger": "is_pirate	Checks if a country is a pirate country (bool)", "contents": "is_pirate = $1" },
		{ "trigger": "influence	Checks country influence", "contents": "influence = {\n\t$1\n }" },
		{ "trigger": "is_at_war_with	checks if an empire is at war with another empire", "contents": "is_at_war_with = $1" },
		{ "trigger": "their_opinion	Checks target country's opinion value of this country", "contents": "their_opinion = {\n\t$1\n }" },
		{ "trigger": "is_same_species_class	checks if a pop or empire is of the same species class as another pop or empire", "contents": "is_same_species_class = $1" },
		{ "trigger": "has_alliance	Checks if a country is in an alliance (bool)", "contents": "has_alliance = $1" },
		{ "trigger": "has_federation	Checks if a country is in an federation (bool)", "contents": "has_federation = $1" },
		{ "trigger": "free_leader_slots	Compares the number of free leader slots", "contents": "free_leader_slots = $1" },
		{ "trigger": "has_global_flag	Checks a global trigger", "contents": "has_global_flag = $1" },
		{ "trigger": "check_variable	Compares the variable value", "contents": "check_variable = {\n\t$1\n }" },
		{ "trigger": "any_planet_within_border	switches Scope to and goes through each random planet within border", "contents": "any_planet_within_border = $1" },
		{ "trigger": "any_owned_ship	any ship owned by a country", "contents": "any_owned_ship = $1" },
		{ "trigger": "energy	Checks for country energy", "contents": "energy = {\n\t$1\n }" },
		{ "trigger": "has_country_edict	checks if a country has an edict", "contents": "has_country_edict = $1" },
		{ "trigger": "is_federation_leader	checks if a country is a federation leader", "contents": "is_federation_leader = $1" },
		{ "trigger": "any_system_within_border	any system within border trigger", "contents": "any_system_within_border = $1" },
		{ "trigger": "is_advisor_active	checks if a country has an advisor", "contents": "is_advisor_active = $1" },
		{ "trigger": "graphical_culture	checks if a country has specified graphical culture", "contents": "graphical_culture = {\n\t$1\n }" },
		{ "trigger": "income	Compares country income.", "contents": "income = $1" },
		{ "trigger": "expenses	Compares country expenses.", "contents": "expenses = $1" },
		{ "trigger": "produced_energy	Compares the amount of produced energy of a country.", "contents": "produced_energy = $1" },
		{ "trigger": "trade_income	Compares the previous months income from the trade of a country.", "contents": "trade_income = $1" },
		{ "trigger": "trade_expenses	Compares the previous months expenses from the trade of a country.", "contents": "trade_expenses = $1" },
		{ "trigger": "ship_maintenance	Compares the previous months ship maintenance of a country.", "contents": "ship_maintenance = $1" },
		{ "trigger": "army_maintenance	Compares the previous months army maintenance of a country.", "contents": "army_maintenance = $1" },
		{ "trigger": "colony_maintenance	Compares the previous months colony maintenance of a country.", "contents": "colony_maintenance = $1" },
		{ "trigger": "station_maintenance	Compares the previous months station maintenance of a country.", "contents": "station_maintenance = $1" },
		{ "trigger": "construction_expenses	Compares the previous months construction expenses of a country.", "contents": "construction_expenses = $1" },
		{ "trigger": "federation_expenses	Compares the previous months federation expenses of a country.", "contents": "federation_expenses = $1" },
		{ "trigger": "stored_physics_points	Compares the amount of stored physics points a country has.", "contents": "stored_physics_points = $1" },
		{ "trigger": "stored_society_points	Compares the amount of stored society points a country has.", "contents": "stored_society_points = $1" },
		{ "trigger": "stored_engineering_points	Compares the amount of stored engineering points a country has.", "contents": "stored_engineering_points = $1" },
		{ "trigger": "balance	Compares country balance.", "contents": "balance = $1" },
		{ "trigger": "running_balance	Compares country running balance.", "contents": "running_balance = $1" },
		{ "trigger": "is_country	checks if a country is of the same as the scope", "contents": "is_country = $1" },
		{ "trigger": "is_tutorial_level	Compares the tutorial level of the player of a country.", "contents": "is_tutorial_level = $1" },
		{ "trigger": "has_event_chain	checks if the country has an event chain", "contents": "has_event_chain = $1" },
		{ "trigger": "is_species_class	Checks if the founder species of a country, or a pop is of a specific species", "contents": "is_species_class = $1" },
		{ "trigger": "vassals	compares the number of vassals", "contents": "vassals = $1" },
		{ "trigger": "has_opinion_modifier	checks if the country has an opinion modifier", "contents": "has_opinion_modifier = {\n\t$1\n }" },
		{ "trigger": "has_established_contact	checks if the country has contact with another country.", "contents": "has_established_contact = {\n\t$1\n }" },
		{ "trigger": "has_completed_event_chain_counter	checks if the country has completed counter in event chain.", "contents": "has_completed_event_chain_counter = {\n\t$1\n }" },
		{ "trigger": "has_existing_ship_design	checks if a country has a specific ship design", "contents": "has_existing_ship_design = $1" },
		{ "trigger": "has_relation_flag	checks for relation flags", "contents": "has_relation_flag = {\n\t$1\n }" },
		{ "trigger": "reverse_has_relation_flag	checks for reverse relation flags", "contents": "reverse_has_relation_flag = {\n\t$1\n }" },
		{ "trigger": "has_edict	checks if a planet or country has an edict activated", "contents": "has_edict = $1" },
		{ "trigger": "is_preventing_anomaly	checks if a planet is currently preventing anomalies", "contents": "is_preventing_anomaly = $1" },
		{ "trigger": "is_rim_system	checks if a system is on the galactic rim", "contents": "is_rim_system = $1" },
		{ "trigger": "is_country_type	checks if country is of specified type", "contents": "is_country_type = $1" },
		{ "trigger": "has_modifier	checks if scope object has a modifier", "contents": "has_modifier = $1" },
		{ "trigger": "sectors	Compares number of sectors", "contents": "sectors = $1" },
		{ "trigger": "num_fleets	checks if a country has the said number of fleets", "contents": "num_fleets = $1" },
		{ "trigger": "num_ships	checks if a country has the said number of ships", "contents": "num_ships = $1" },
		{ "trigger": "num_ethics	compares the number of ethics with a value", "contents": "num_ethics = $1" },
		{ "trigger": "num_traits	compares the number of traits with a value", "contents": "num_traits = $1" },
		{ "trigger": "has_truce	checks if a country has truce with certain country", "contents": "has_truce = $1" },
		{ "trigger": "sectors_over_limit	Compares number of sectors over the limit", "contents": "sectors_over_limit = $1" },
		{ "trigger": "intel_level	checks if scope-country has intel level </>/= [level] in [system] ( intel_level = { level > low system = FROMFROM } )", "contents": "intel_level = {\n\t$1\n }" },
		{ "trigger": "any_owned_leader	switches Scope to and goes through each owned leader", "contents": "any_owned_leader = $1" },
		{ "trigger": "any_owned_pop	switches scope to and goes through each pop unit on the planet or all pops of the scope species", "contents": "any_owned_pop = $1" },
		{ "trigger": "has_faction	checks if an empire has a certain faction type", "contents": "has_faction = $1" },
		{ "trigger": "count_owned_pops	Counts the amount of pops which fill a requirement and compare it to a number", "contents": "count_owned_pops = {\n\t$1\n }" },
		{ "trigger": "can_declare_war	Checks if we can declare war against a target", "contents": "can_declare_war = $1" },
		{ "trigger": "is_hostile	Checks if country is hostile against a target", "contents": "is_hostile = $1" },
		{ "trigger": "has_communications	Checks if country has communication with another country", "contents": "has_communications = $1" },
		{ "trigger": "has_country_resource	Compares the stored resources of a country.", "contents": "has_country_resource = {\n\t$1\n }" },
		{ "trigger": "num_killed_ships	Compares how many ships scope country has killed of [target]", "contents": "num_killed_ships = {\n\t$1\n }" },
		{ "trigger": "num_taken_planets	Compares how many planets scope country has taken from [target]", "contents": "num_taken_planets = {\n\t$1\n }" },
		{ "trigger": "count_owned_ships	compares number of ships in a country that matches the [limit = {..}]", "contents": "count_owned_ships = {\n\t$1\n }" },
		{ "trigger": "research_leader	switches Scope to and goes to research leader", "contents": "research_leader = {\n\t$1\n }" },
		{ "trigger": "opposing_ethics_divergence	Compares the opposing ethics divergence.", "contents": "opposing_ethics_divergence = {\n\t$1\n }" },
		{ "trigger": "is_war_leader	Checks if country is war leader", "contents": "is_war_leader = $1" },
		{ "trigger": "can_create_sector	Checks if a sector can be created on the targeted planet", "contents": "can_create_sector = $1" },
		{ "trigger": "is_in_alliance_with	Checks if country is in an alliance with target country", "contents": "is_in_alliance_with = $1" },
		{ "trigger": "is_in_federation_with	Checks if country is in a federation with target country", "contents": "is_in_federation_with = $1" },
		{ "trigger": "can_change_policy	Checks if a country can change anything with a policy", "contents": "can_change_policy = $1" },
		{ "trigger": "count_pop_factions	Counts the amount of pop factions which fill a requirement and compare it to a number", "contents": "count_pop_factions = {\n\t$1\n }" },
		{ "trigger": "num_communications	compares the number of planets on a planet with a value", "contents": "num_communications = $1" },
		{ "trigger": "has_monthly_income	checks monthly income of resource compared against specific value", "contents": "has_monthly_income = {\n\t$1\n }" },
		{ "trigger": "last_changed_policy	checks the last changed policy of a country against specified policy", "contents": "last_changed_policy = $1" },
		{ "trigger": "any_sector	switches scope to and goes through each sector of a country", "contents": "any_sector = $1" },
		{ "trigger": "has_policy_flag	checks if a country has a policy", "contents": "has_policy_flag = $1" },
		{ "trigger": "any_owned_fleet	any fleet owned by a country", "contents": "any_owned_fleet = $1" },
		{ "trigger": "has_tech_option	checks if a country has a technology option", "contents": "has_tech_option = $1" },
		{ "trigger": "count_tech_options	Compares the amount of tech options a country has against a value, can specify which area", "contents": "count_tech_options = {\n\t$1\n }" },
		{ "trigger": "last_increased_tech	Compares against the last increased tech of a country", "contents": "last_increased_tech = {\n\t$1\n }" },
		{ "trigger": "has_country_strategic_resource	Compares the resources of a country.", "contents": "has_country_strategic_resource = $1" },
		{ "trigger": "has_point_of_interest	Checks if the scope location has a point of interest", "contents": "has_point_of_interest = {\n\t$1\n }" },
		{ "trigger": "any_war	switches Scope to any war", "contents": "any_war = $1" },
		{ "trigger": "off_war_score_sum	checks the sum of war score in all offensive wars", "contents": "off_war_score_sum = $1" },
		{ "trigger": "def_war_score_sum	checks the sum of war score in all defensive wars", "contents": "def_war_score_sum = $1" },
		{ "trigger": "any_bordering_country	any bordering country", "contents": "any_bordering_country = $1" },
		{ "trigger": "galaxy_percentage	checks if the scope owns systems corresponding to a certain galaxy percentage", "contents": "galaxy_percentage = $1" },
		{ "trigger": "count_armies	Counts the amount of armies which fill a requirement and compare it to a number", "contents": "count_armies = $1" },
		{ "trigger": "is_guaranteeing	checks if scope country is guaranteeing target country", "contents": "is_guaranteeing = $1" },
		{ "trigger": "is_threatened_to	Attitude check, if country is threatened by target country", "contents": "is_threatened_to = $1" },
		{ "trigger": "is_protective_to	Attitude check, if country is protective of target country", "contents": "is_protective_to = $1" },
		{ "trigger": "is_friendly_to	Attitude check, if country is friendly to target country", "contents": "is_friendly_to = $1" },
		{ "trigger": "is_hostile_to	Attitude check, if country is hostile to target country", "contents": "is_hostile_to = $1" },
		{ "trigger": "is_dismissive_to	Attitude check, if country is dismissive of target country", "contents": "is_dismissive_to = $1" },
		{ "trigger": "is_patronizing_to	Attitude check, if country is patronizing to target country", "contents": "is_patronizing_to = $1" },
		{ "trigger": "is_angry_to	Attitude check, if country is angry at target country", "contents": "is_angry_to = $1" },
		{ "trigger": "is_neighbor_of	Checks if country is neighbors with target", "contents": "is_neighbor_of = $1" },
		{ "trigger": "any_neighbor_country	Trigger Scope for any neighboring country", "contents": "any_neighbor_country = $1" },
		{ "trigger": "is_rival	Attitude check, if country is a rival of target country", "contents": "is_rival = $1" },
		{ "trigger": "is_unfriendly_to	Attitude check, if country is unfriendly to target country", "contents": "is_unfriendly_to = $1" },
		{ "trigger": "is_loyal_to	Attitude check, if country is loyal to target country", "contents": "is_loyal_to = $1" },
		{ "trigger": "is_disloyal_to	Attitude check, if country is disloyal to target country", "contents": "is_disloyal_to = $1" },
		{ "trigger": "is_cordial_to	Attitude check, if country is cordial to target country", "contents": "is_cordial_to = $1" },
		{ "trigger": "is_domineering_to	Attitude check, if country is domineering towards target country", "contents": "is_domineering_to = $1" },
		{ "trigger": "is_wary_to	Attitude check, if country is wary of target country", "contents": "is_wary_to = $1" },
		{ "trigger": "fleet_power	Checks country fleet power", "contents": "fleet_power = $1" },
		{ "trigger": "has_election_type	checks if a country has a specified election type", "contents": "has_election_type = $1" },
		{ "trigger": "has_ai_personality	Checks if an Empire has a certain personality type", "contents": "has_ai_personality = $1" },
		{ "trigger": "has_ai_personality_type	Checks if an Empire has a certain personality type", "contents": "has_ai_personality_type = $1" },
		{ "trigger": "has_ai_personality_behaviour	Checks if an Empire has a certain personality behaviour", "contents": "has_ai_personality_behaviour = $1" },
		{ "trigger": "has_valid_ai_personality	checks if a country has a valid ai", "contents": "has_valid_ai_personality = $1" },
		{ "trigger": "has_migration_access	checks if scope country has migration access to target country", "contents": "has_migration_access = $1" },
		{ "trigger": "grants_migration_access	Checks if a country grants migration access to anyone", "contents": "grants_migration_access = $1" },
		{ "trigger": "tech_unlocked_ratio	ratio of tech between this and from", "contents": "tech_unlocked_ratio = {\n\t$1\n }" },
		{ "trigger": "has_special_project	checks if a country has a special project available", "contents": "has_special_project = $1" },
		{ "trigger": "would_join_war	Checks if a country would join the side of a certain country in a hypothetical war", "contents": "would_join_war = {\n\t$1\n }" },
		{ "trigger": "can_be_subject	Checks if country can be subject of 'subject_type' under 'overlord'", "contents": "can_be_subject = {\n\t$1\n }" },
		{ "trigger": "is_subspecies	checks if a pop or empire is a subspecies of the same species as another pop or empire", "contents": "is_subspecies = $1" },
		{ "trigger": "is_valid	checks to see if the target of a scope is valid", "contents": "is_valid = $1" },
		{ "trigger": "subject_can_diplomacy	Checks if we are allowed by our overlord to do certain diplomatic actions", "contents": "subject_can_diplomacy = $1" },
		{ "trigger": "has_surveyed_class	Checks a country has surveyed planet class trigger", "contents": "has_surveyed_class = $1" },
		{ "trigger": "num_rare_techs	Compares number of researched rare technologies", "contents": "num_rare_techs = $1" },
		{ "trigger": "species_portrait	Checks if a species uses a certain portrait.", "contents": "species_portrait = $1" },
		{ "trigger": "num_armies	checks if a country has the said number of armies", "contents": "num_armies = $1" },
		{ "trigger": "is_proposing_war_demands	Checks if currently proposing wardemands or handling existing wardemands", "contents": "is_proposing_war_demands = $1" },
		{ "trigger": "max_naval_capacity	Compares a countries max naval capacity", "contents": "max_naval_capacity = $1" },
		{ "trigger": "used_naval_capacity_integer	Compares a countries used naval capacity", "contents": "used_naval_capacity_integer = $1" },
		{ "trigger": "used_naval_capacity_percent	Compares a countries percent used naval capacity. values 0-1", "contents": "used_naval_capacity_percent = $1" },
		{ "trigger": "if	a conditional trigger", "contents": "if = {\n\t$1\n }" },
		{ "trigger": "logged_in_to_pdx_account	Checks if the local human is logged in to a Pdx account. This WILL cause an out of sync if used for anything that can change the game state", "contents": "logged_in_to_pdx_account = $1" },
		{ "trigger": "and	all inside trigger must be true", "contents": "and = {\n\t$1\n }" },
		{ "trigger": "or	at least one entry inside trigger must be true", "contents": "or = {\n\t$1\n }" },
		{ "trigger": "not	negates content of trigger", "contents": "not = {\n\t$1\n }" },
		{ "trigger": "hidden_trigger	hides the tooltip for the effects within", "contents": "hidden_trigger = {\n\t$1\n }" },
		{ "trigger": "always	either always false or true", "contents": "always = $1" },
		{ "trigger": "any_country	Trigger Scope for any country", "contents": "any_country = $1" },
		{ "trigger": "any_planet	any planet in a solar system", "contents": "any_planet = $1" },
		{ "trigger": "any_ship	any ship in the game", "contents": "any_ship = $1" },
		{ "trigger": "any_system	any system trigger", "contents": "any_system = $1" },
		{ "trigger": "is_multiplayer	checks if the game is running in multiplayer", "contents": "is_multiplayer = $1" },
		{ "trigger": "exists	checks for object existance", "contents": "exists = $1" },
		{ "trigger": "any_rim_system	switches scope to and goes through each rim system", "contents": "any_rim_system = $1" },
		{ "trigger": "switch	Switches between scopes", "contents": "switch = {\n\t$1\n }" },
		{ "trigger": "any_ship_in_system	any ship in system", "contents": "any_ship_in_system = $1" },
		{ "trigger": "is_same_value	checks if two scopes have the same value", "contents": "is_same_value = $1" },
		{ "trigger": "is_scope_valid	Checks if the current scope is valid", "contents": "is_scope_valid = $1" },
		{ "trigger": "closest_system	switches scope to closest system that passes limit", "contents": "closest_system = $1" },
		{ "trigger": "is_ironman	Check if current game is ironman.", "contents": "is_ironman = $1" },
		{ "trigger": "custom_tooltip_fail	shows custom text when trigger is failing", "contents": "custom_tooltip_fail = {\n\t$1\n }" },
		{ "trigger": "years_passed	compares the number of years that have passed since game start with a value", "contents": "years_passed = $1" },
		{ "trigger": "host_has_dlc	Checks if the host has a certain dlc enabled", "contents": "host_has_dlc = $1" },
		{ "trigger": "local_has_dlc	Checks if the host has a certain dlc enabled", "contents": "local_has_dlc = $1" },
		{ "trigger": "nor	negates content of trigger", "contents": "nor = $1" },
		{ "trigger": "nand	negates content of trigger", "contents": "nand = $1" },
		{ "trigger": "text	shows custom text", "contents": "text = $1" },
		{ "trigger": "custom_tooltip	shows a custom tooltip for the effects within", "contents": "custom_tooltip = {\n\t$1\n }" },
		{ "trigger": "members	compares the number of alliance members", "contents": "members = $1" },
		{ "trigger": "any_ambient_object	any ambient object trigger", "contents": "any_ambient_object = $1" },
		{ "trigger": "any_member	any member in an alliance", "contents": "any_member = $1" }
	]
}