
{
	"scope":"effect planet",
	"completions":
	[
		{ "trigger": "tooltip	just a tooltip", "contents": "tooltip = {\n\t$1\n }" },
		{ "trigger": "planet_event	fires a Planet event", "contents": "planet_event = {\n\t$1\n }" },
		{ "trigger": "add_minerals	Adds Minerals to a planet, tile or country", "contents": "add_minerals = $1" },
		{ "trigger": "add_physics	Adds Physics resources to a planet", "contents": "add_physics = $1" },
		{ "trigger": "add_society	Adds Society resources to a planet", "contents": "add_society = $1" },
		{ "trigger": "add_engineering	Adds Engineering resources to a planet", "contents": "add_engineering = $1" },
		{ "trigger": "set_owner	Sets the owner of a planet or fleet.", "contents": "set_owner = $1" },
		{ "trigger": "add_resource	Adds a resource to a planet or tile", "contents": "add_resource = {\n\t$1\n }" },
		{ "trigger": "set_planet_flag	Sets a flag on a planet", "contents": "set_planet_flag = $1" },
		{ "trigger": "remove_planet_flag	Removes a flag from a planet", "contents": "remove_planet_flag = $1" },
		{ "trigger": "create_army	Creates a new army", "contents": "create_army = {\n\t$1\n }" },
		{ "trigger": "create_pop	Creates a new pop", "contents": "create_pop = {\n\t$1\n }" },
		{ "trigger": "create_colony	Creates a colony", "contents": "create_colony = {\n\t$1\n }" },
		{ "trigger": "set_capital	Sets planet to capital of a country", "contents": "set_capital = $1" },
		{ "trigger": "change_pc	Change planet class of planet.", "contents": "change_pc = $1" },
		{ "trigger": "random_pop	Picks a random pop", "contents": "random_pop = $1" },
		{ "trigger": "destroy_colony	Destroys the colony on the planet", "contents": "destroy_colony = $1" },
		{ "trigger": "surveyed	Sets a planet as surveyed by a specific country", "contents": "surveyed = {\n\t$1\n }" },
		{ "trigger": "set_ring	Adds or removes the ring around a planet", "contents": "set_ring = $1" },
		{ "trigger": "create_mining_station	Creates a mining station", "contents": "create_mining_station = {\n\t$1\n }" },
		{ "trigger": "create_research_station	Creates a research station", "contents": "create_research_station = {\n\t$1\n }" },
		{ "trigger": "every_owned_pop	switches scope to pop and goes through all pops on planet or in country", "contents": "every_owned_pop = $1" },
		{ "trigger": "set_name	changes the name of a scope target", "contents": "set_name = $1" },
		{ "trigger": "add_modifier	Gives a specific modifier to a planet.", "contents": "add_modifier = {\n\t$1\n }" },
		{ "trigger": "set_variable	Sets a variable value", "contents": "set_variable = {\n\t$1\n }" },
		{ "trigger": "change_variable	Changes a variable value", "contents": "change_variable = {\n\t$1\n }" },
		{ "trigger": "every_pop	fires a Pop event", "contents": "every_pop = $1" },
		{ "trigger": "create_rebels	Creates a new rebel country", "contents": "create_rebels = {\n\t$1\n }" },
		{ "trigger": "cancel_terraformation	Cancels terraformation on the planet", "contents": "cancel_terraformation = $1" },
		{ "trigger": "spawn_system	spawns system with position relative to scope, parameters are system, min_distance(0), max_distance(100)", "contents": "spawn_system = {\n\t$1\n }" },
		{ "trigger": "random_research_station	Picks a random research station", "contents": "random_research_station = $1" },
		{ "trigger": "random_mining_station	Picks a random mining station", "contents": "random_mining_station = $1" },
		{ "trigger": "random_spaceport	Picks a random spaceport", "contents": "random_spaceport = $1" },
		{ "trigger": "random_army	Picks a random army", "contents": "random_army = $1" },
		{ "trigger": "modify_species	Creates a new modified species", "contents": "modify_species = {\n\t$1\n }" },
		{ "trigger": "add_anomaly	adds a specified anomaly to planet", "contents": "add_anomaly = $1" },
		{ "trigger": "change_planet_size	Adds/Removes onto the size of the planet.", "contents": "change_planet_size = $1" },
		{ "trigger": "every_tile	Executes on every tile on planet", "contents": "every_tile = $1" },
		{ "trigger": "random_tile	Executes on a random tile on planet", "contents": "random_tile = $1" },
		{ "trigger": "create_point_of_interest	Creates point of interest", "contents": "create_point_of_interest = {\n\t$1\n }" },
		{ "trigger": "random_moon	Executes on all moons", "contents": "random_moon = $1" },
		{ "trigger": "every_moon	Executes on all moons", "contents": "every_moon = $1" },
		{ "trigger": "kill_leader	Kills leaders of specified types. kill_leader = { type = general type = scientist etc. }", "contents": "kill_leader = {\n\t$1\n }" },
		{ "trigger": "set_timed_planet_flag	Sets a timed flag on a planet", "contents": "set_timed_planet_flag = {\n\t$1\n }" },
		{ "trigger": "prevent_anomaly	Sets if this planet will generate new anomalies.", "contents": "prevent_anomaly = $1" },
		{ "trigger": "every_planet_army	Picks every army", "contents": "every_planet_army = $1" },
		{ "trigger": "observation_outpost_owner	Picks the observation station owner", "contents": "observation_outpost_owner = $1" },
		{ "trigger": "observation_outpost	Picks the observation station", "contents": "observation_outpost = $1" },
		{ "trigger": "purge	Starts/stops purging pops", "contents": "purge = {\n\t$1\n }" },
		{ "trigger": "set_planet_max_health	Sets the maximum health of a planet", "contents": "set_planet_max_health = $1" },
		{ "trigger": "set_planet_health	Sets the current health of a planet", "contents": "set_planet_health = $1" },
		{ "trigger": "remove_modifier	Removes a specific modifier from a planet.", "contents": "remove_modifier = $1" },
		{ "trigger": "set_spaceport_module	Sets a spaceport module at specified slot", "contents": "set_spaceport_module = {\n\t$1\n }" },
		{ "trigger": "create_spaceport	creates a spaceport around planet", "contents": "create_spaceport = {\n\t$1\n }" },
		{ "trigger": "set_spaceport_level	Sets the level of the spaceport", "contents": "set_spaceport_level = $1" },
		{ "trigger": "set_controller	Sets the controller of a planet", "contents": "set_controller = $1" },
		{ "trigger": "random_owned_pop	Picks a random pop", "contents": "random_owned_pop = $1" },
		{ "trigger": "unassign_leader	Unassigns a leader from scope", "contents": "unassign_leader = $1" },
		{ "trigger": "add_colony_progress	Add progress to a colony", "contents": "add_colony_progress = $1" },
		{ "trigger": "start_colony	Starts a colony", "contents": "start_colony = $1" },
		{ "trigger": "add_threat	Adds threat", "contents": "add_threat = {\n\t$1\n }" },
		{ "trigger": "remove_spaceport_module	Removes a spaceport module from a spaceport. Argument is either a spaceport module slot number or a spaceport module tag", "contents": "remove_spaceport_module = $1" },
		{ "trigger": "hidden_effect	Effect not shown in tooltips", "contents": "hidden_effect = {\n\t$1\n }" },
		{ "trigger": "custom_tooltip	just a tooltip", "contents": "custom_tooltip = {\n\t$1\n }" },
		{ "trigger": "if	a conditional effect", "contents": "if = {\n\t$1\n }" },
		{ "trigger": "random	a random effect", "contents": "random = {\n\t$1\n }" },
		{ "trigger": "random_list	a random effect", "contents": "random_list = {\n\t$1\n }" },
		{ "trigger": "create_species	Creates a new species", "contents": "create_species = {\n\t$1\n }" },
		{ "trigger": "create_country	Creates a new country", "contents": "create_country = {\n\t$1\n }" },
		{ "trigger": "create_fleet	Creates a new fleet", "contents": "create_fleet = {\n\t$1\n }" },
		{ "trigger": "random_country	Picks a random country", "contents": "random_country = $1" },
		{ "trigger": "remove_global_flag	Removes a flag from a country", "contents": "remove_global_flag = $1" },
		{ "trigger": "set_variable	Sets a variable value", "contents": "set_variable = {\n\t$1\n }" },
		{ "trigger": "change_variable	Changes a variable value", "contents": "change_variable = {\n\t$1\n }" },
		{ "trigger": "set_global_flag	Sets a global flag", "contents": "set_global_flag = $1" },
		{ "trigger": "every_country	fires a Country event", "contents": "every_country = $1" },
		{ "trigger": "every_ship	fires a Ship event", "contents": "every_ship = $1" },
		{ "trigger": "every_planet	Executes on every planet", "contents": "every_planet = $1" },
		{ "trigger": "save_event_target_as	save an event target", "contents": "save_event_target_as = $1" },
		{ "trigger": "save_global_event_target_as	save a global event target", "contents": "save_global_event_target_as = $1" },
		{ "trigger": "clear_global_event_target	clear a global event target", "contents": "clear_global_event_target = $1" },
		{ "trigger": "clear_global_event_targets	clear all global event targets", "contents": "clear_global_event_targets = $1" },
		{ "trigger": "break	break execution of effects", "contents": "break = $1" },
		{ "trigger": "while	repeats contained effects until limit fails or count is reached", "contents": "while = {\n\t$1\n }" },
		{ "trigger": "destroy_fleet	Destroys fleet on the right side of =", "contents": "destroy_fleet = $1" },
		{ "trigger": "create_ambient_object	Creates a new ambient object of type <type> at location <location>", "contents": "create_ambient_object = {\n\t$1\n }" },
		{ "trigger": "destroy_ambient_object	Destroys an ambient object", "contents": "destroy_ambient_object = $1" },
		{ "trigger": "set_timed_global_flag	Sets a timed global flag", "contents": "set_timed_global_flag = {\n\t$1\n }" },
		{ "trigger": "switch	Switches effect based on triggers", "contents": "switch = {\n\t$1\n }" },
		{ "trigger": "closest_system	switches scope to closest system that passes limit", "contents": "closest_system = $1" },
		{ "trigger": "random_planet	Executes on a random planet", "contents": "random_planet = $1" },
		{ "trigger": "random_system	Picks a random system", "contents": "random_system = $1" },
		{ "trigger": "every_rim_system	Executes on every system on the galactic rim", "contents": "every_rim_system = $1" },
		{ "trigger": "random_rim_system	Executes on a random system on the galactic rim", "contents": "random_rim_system = $1" },
		{ "trigger": "random_ambient_object	executes effects on every ambient object that passes limit", "contents": "random_ambient_object = $1" },
		{ "trigger": "every_ambient_object	executes effects on every ambient object that passes limit", "contents": "every_ambient_object = $1" }
	]
}