
{
	"scope":"condition fleet",
	"completions":
	[
		{ "trigger": "distance	Compares the min/max distance to a target with a value", "contents": "distance = {\n\t$1\n }" },
		{ "trigger": "has_fleet_flag	Checks if a fleet has a specified flag", "contents": "has_fleet_flag = $1" },
		{ "trigger": "is_ship_class	checks if a ship is a specified class", "contents": "is_ship_class = $1" },
		{ "trigger": "is_ship_size	checks if a ship is a specified size", "contents": "is_ship_size = $1" },
		{ "trigger": "is_inside_nebula	checks if a planet/ship is inside a nebula", "contents": "is_inside_nebula = $1" },
		{ "trigger": "is_inside_border	checks if a planet/ship/fleet is inside the border of the specified country", "contents": "is_inside_border = $1" },
		{ "trigger": "free_leader_slots	Compares the number of free leader slots", "contents": "free_leader_slots = $1" },
		{ "trigger": "has_global_flag	Checks a global trigger", "contents": "has_global_flag = $1" },
		{ "trigger": "check_variable	Compares the variable value", "contents": "check_variable = {\n\t$1\n }" },
		{ "trigger": "is_disabled	checks if a ship or fleet is disabled", "contents": "is_disabled = $1" },
		{ "trigger": "is_preventing_anomaly	checks if a planet is currently preventing anomalies", "contents": "is_preventing_anomaly = $1" },
		{ "trigger": "is_rim_system	checks if a system is on the galactic rim", "contents": "is_rim_system = $1" },
		{ "trigger": "has_mission	checks if a fleet has a certain mission", "contents": "has_mission = $1" },
		{ "trigger": "num_ships	checks if a country has the said number of ships", "contents": "num_ships = $1" },
		{ "trigger": "mission_progress	checks if a mission has a certain progress", "contents": "mission_progress = $1" },
		{ "trigger": "sector_controlled	Checks if the planet/fleet is controlled by the sector", "contents": "sector_controlled = $1" },
		{ "trigger": "count_ships	compares number of ships in a fleet that matches the [limit = {..}]", "contents": "count_ships = $1" },
		{ "trigger": "has_fleet_order	checks if a ship or a fleet has a fleet order", "contents": "has_fleet_order = $1" },
		{ "trigger": "has_ground_support_stance	checks if a fleet has a certain bombardment stance", "contents": "has_ground_support_stance = $1" },
		{ "trigger": "is_being_repaired	Checks if a fleet or ship is being repaired", "contents": "is_being_repaired = $1" },
		{ "trigger": "is_in_combat	Checks if a fleet or ship is being repaired", "contents": "is_in_combat = $1" },
		{ "trigger": "fleet_size	Checks fleet size", "contents": "fleet_size = $1" },
		{ "trigger": "has_spaceport_module	Checks if a spaceport has a module upgrade", "contents": "has_spaceport_module = $1" },
		{ "trigger": "has_free_spaceport_module_slot	Checks if a spaceport has a free module slot", "contents": "has_free_spaceport_module_slot = $1" },
		{ "trigger": "is_spaceport_module_slot_free	Checks if a specific spaceport module slot is free", "contents": "is_spaceport_module_slot_free = $1" },
		{ "trigger": "can_build_spaceport_module	Checks if a spaceport is allowed to build a specific module upgrade", "contents": "can_build_spaceport_module = $1" },
		{ "trigger": "num_free_spaceport_module_slots	Compares the parameter to the amount of free spaceport module slots", "contents": "num_free_spaceport_module_slots = $1" },
		{ "trigger": "num_spaceport_modules	Compares the parameter to the amount of spaceport modules", "contents": "num_spaceport_modules = $1" },
		{ "trigger": "is_proposing_war_demands	Checks if currently proposing wardemands or handling existing wardemands", "contents": "is_proposing_war_demands = $1" },
		{ "trigger": "if	a conditional trigger", "contents": "if = {\n\t$1\n }" },
		{ "trigger": "logged_in_to_pdx_account	Checks if the local human is logged in to a Pdx account. This WILL cause an out of sync if used for anything that can change the game state", "contents": "logged_in_to_pdx_account = $1" },
		{ "trigger": "and	all inside trigger must be true", "contents": "and = {\n\t$1\n }" },
		{ "trigger": "or	at least one entry inside trigger must be true", "contents": "or = {\n\t$1\n }" },
		{ "trigger": "not	negates content of trigger", "contents": "not = {\n\t$1\n }" },
		{ "trigger": "hidden_trigger	hides the tooltip for the effects within", "contents": "hidden_trigger = {\n\t$1\n }" },
		{ "trigger": "always	either always false or true", "contents": "always = $1" },
		{ "trigger": "any_country	Trigger Scope for any country", "contents": "any_country = $1" },
		{ "trigger": "any_planet	any planet in a solar system", "contents": "any_planet = $1" },
		{ "trigger": "any_ship	any ship in the game", "contents": "any_ship = $1" },
		{ "trigger": "any_system	any system trigger", "contents": "any_system = $1" },
		{ "trigger": "is_multiplayer	checks if the game is running in multiplayer", "contents": "is_multiplayer = $1" },
		{ "trigger": "exists	checks for object existance", "contents": "exists = $1" },
		{ "trigger": "any_rim_system	switches scope to and goes through each rim system", "contents": "any_rim_system = $1" },
		{ "trigger": "switch	Switches between scopes", "contents": "switch = {\n\t$1\n }" },
		{ "trigger": "any_ship_in_system	any ship in system", "contents": "any_ship_in_system = $1" },
		{ "trigger": "is_same_value	checks if two scopes have the same value", "contents": "is_same_value = $1" },
		{ "trigger": "is_scope_valid	Checks if the current scope is valid", "contents": "is_scope_valid = $1" },
		{ "trigger": "closest_system	switches scope to closest system that passes limit", "contents": "closest_system = $1" },
		{ "trigger": "is_ironman	Check if current game is ironman.", "contents": "is_ironman = $1" },
		{ "trigger": "custom_tooltip_fail	shows custom text when trigger is failing", "contents": "custom_tooltip_fail = {\n\t$1\n }" },
		{ "trigger": "years_passed	compares the number of years that have passed since game start with a value", "contents": "years_passed = $1" },
		{ "trigger": "host_has_dlc	Checks if the host has a certain dlc enabled", "contents": "host_has_dlc = $1" },
		{ "trigger": "local_has_dlc	Checks if the host has a certain dlc enabled", "contents": "local_has_dlc = $1" },
		{ "trigger": "nor	negates content of trigger", "contents": "nor = $1" },
		{ "trigger": "nand	negates content of trigger", "contents": "nand = $1" },
		{ "trigger": "text	shows custom text", "contents": "text = $1" },
		{ "trigger": "custom_tooltip	shows a custom tooltip for the effects within", "contents": "custom_tooltip = {\n\t$1\n }" },
		{ "trigger": "members	compares the number of alliance members", "contents": "members = $1" },
		{ "trigger": "any_ambient_object	any ambient object trigger", "contents": "any_ambient_object = $1" },
		{ "trigger": "any_member	any member in an alliance", "contents": "any_member = $1" }
	]
}