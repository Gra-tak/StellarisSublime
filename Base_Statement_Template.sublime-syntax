%YAML 1.2
---
# See http://www.sublimetext.com/docs/3/syntax.html
#The base level syntax file
#TODO: Rename to Stellaris.sublime-syntax
# These are of particular interest
#(events, fleet_event)
#(events, planet_event)
#(events, country_event)
#(events, pop_faction_event)
#(events, ship_event)
#(events, event)
#(events, pop_event)
#(anomalies, anomaly)
#(anomalies, anomaly_category)
#then one for general ones

file_extensions: 
  - syntaxtest
scope: source.stellaris

variables:
  equals_open_brace: '\s+(=)\s+({)'
  value_with_dots: '(-?(?:\w|\.)+)'
  any_value : '("?(?:\w|\.|:)+"?)'
  equals_value_with_dots: '\s*(=)\s*{{value_with_dots}}'
  user_keyword: ((?:\w|:)+)
prototype:
  - include: comment

contexts:
  main:
    - match: '(event){{equals_open_brace}}' #Globally scoped, can only use stuff that goes to every/any item in the galaxy
      scope: keyword.defined.block.altering
      push: event

    - match: '(country_event){{equals_open_brace}}'
      scope: keyword.defined.block.altering
      push: country_event

    - match: '(planet_event){{equals_open_brace}}'
      scope: keyword.defined.block.altering
      push: planet_event

    - match: '(pop_event){{equals_open_brace}}'
      scope: keyword.defined.block.altering
      push: pop_event

    - match: '(pop_faction_event){{equals_open_brace}}'
      scope: keyword.defined.block.altering
      push: pop_faction_event

    - match: '(fleet_event){{equals_open_brace}}'
      scope: keyword.defined.block.altering
      push: fleet_event

    - match: '(ship_event){{equals_open_brace}}'
      scope: keyword.defined.block.altering
      push: ship_event
   # - match: 'anomaly{{equals_open_brace}}'
    - match: '(anomaly_category){{equals_open_brace}}'
      captures:
        1: keyword.defined.block.altering
        2: sign.equals
        3: brace.open
      push: anomaly_category

    - match: '(\w+){{equals_open_brace}}'
      captures:
        1: unknown.base.statement
        2: sign.equals
        3: brace.open
      push: general_event
    - match: '(@\w+)\s*(=)\s*{{value_with_dots}}'
      captures:
        1: value.user.defined.constant
        2: sign.equals
        3: value.user.defined 
#   ▄█▀█▄░░█▀▀▀▀░░█▄░░█░░█▀▀▀▀░░██▀█▄░░▄█▀█▄░░█░░░░░░░░░░░█▀▀▀▀░░█░░░█░░█▀▀▀▀░░█▄░░█░░▀▀█▀▀░░░░░
#   █░░░▀░░█░░░░░░█▀▄░█░░█░░░░░░█▄░▄█░░█░░░█░░█░░░░░░░░░░░█░░░░░░█░░░█░░█░░░░░░█▀▄░█░░░░█░░░░░░░
#   █░▀▀█░░█▀▀▀░░░█░▀▄█░░█▀▀▀░░░███▀░░░█▀▀▀█░░█░░░░░░░░░░░█▀▀▀░░░█░░░█░░█▀▀▀░░░█░▀▄█░░░░█░░░░░░░
#   ▀█▄█▀░░█▄▄▄▄░░█░░▀█░░█▄▄▄▄░░█░▀█▄░░█░░░█░░█▄▄▄▄░░░░░░░█▄▄▄▄░░░▀▄▀░░░█▄▄▄▄░░█░░▀█░░░░█░░░░░░░
#   

  general_event:
    - meta_scope: event
    - include: comment
    #Basic stuff that is generally always present
    - match: '\b(id|picture|show_sound|is_triggered_only|location|hide_window){{equals_value_with_dots}}\b'
      captures:
        1: keyword.defined.value
        2: sign.equals
        3: value.user.defined
        
    - match: '\b(title|desc)\b'
      scope: keyword.defined.value.localised

    - match: '"'
      push: localised

    - include: unknown
    - include: eat_end_brace
    #Match a keyword we haven't seen to some value

  localised:
    - meta_scope: 'value.localised'
    - match: '"'
      pop: true

  eat_end_brace:
    - match: "}"
      scope: brace.end
      pop: true
  
  event: 
    - meta_scope: event
    - match: '(trigger){{equals_open_brace}}'
      captures:
        1: keyword.defined.block.constant
        2: sign.equals
        3: brace.open
      push: 'Packages/Stellaris/hidden/global_condition.sublime-syntax'
    
    # Matches immediate block
    - match: '(immediate){{equals_open_brace}}'
      captures:
        1: keyword.defined.block.constant
        2: sign.equals
        3: brace.open
      push: 'Packages/Stellaris/hidden/global_effect.sublime-syntax'

    - include: general_event

#      
#  ▄█▀█▄░░█▀▀▀█░░█░░░█░░█▄░░█░░▀▀█▀▀░░██▀█▄░░█░░░█░░░░░░░█▀▀▀▀░░█░░░█░░█▀▀▀▀░░█▄░░█░░▀▀█▀▀░░░░░
#  █░░░▀░░█░░░█░░█░░░█░░█▀▄░█░░░░█░░░░█▄░▄█░░▀█▄█▀░░░░░░░█░░░░░░█░░░█░░█░░░░░░█▀▄░█░░░░█░░░░░░░
#  █░░░▄░░█░░░█░░█░░░█░░█░▀▄█░░░░█░░░░███▀░░░░░█░░░░░░░░░█▀▀▀░░░█░░░█░░█▀▀▀░░░█░▀▄█░░░░█░░░░░░░
#  ▀█▄█▀░░█▄▄▄█░░█▄▄▄█░░█░░▀█░░░░█░░░░█░▀█▄░░░░█░░░░░░░░░█▄▄▄▄░░░▀▄▀░░░█▄▄▄▄░░█░░▀█░░░░█░░░░░░░

  country_event:
    - meta_scope: event
    # Matches trigger match
    - match: '(trigger){{equals_open_brace}}'
      captures:
        1: keyword.defined.block.constant
        2: sign.equals
        3: brace.open
      push: 'Packages/Stellaris/hidden/country_condition.sublime-syntax'
    - match: '(desc){{equals_open_brace}}'
      captures:
        1: keyword.defined.block.constant
        2: sign.equals
        3: brace.open
      push: country_event

    # Matches immediate block
    - match: '(immediate){{equals_open_brace}}'
      captures:
        1: keyword.defined.block.constant
        2: sign.equals
        3: brace.open
      push: 'Packages/Stellaris/hidden/country_effect.sublime-syntax'
    
    ## Matches Option block
    - match: '(option){{equals_open_brace}}'
      captures:
        1: keyword.defined.block.constant
        2: sign.equals
        3: brace.open
      push:
        - meta_scope: effect country
        - include: option_name
        - match: '(trigger){{equals_open_brace}}'
          captures:
            1: keyword.defined.block.constant
            2: sign.equals
            3: brace.open
          push: 'Packages/Stellaris/hidden/country_condition.sublime-syntax'
        - include: 'Packages/Stellaris/hidden/country_effect.sublime-syntax'
    - include: general_event  #


#    █▀▀█▄░░█░░░░░░▄█▀█▄░░█▄░░█░░█▀▀▀▀░░▀▀█▀▀░░░░░░░█▀▀▀▀░░█░░░█░░█▀▀▀▀░░█▄░░█░░▀▀█▀▀░░░░░
#    █░░▄█░░█░░░░░░█░░░█░░█▀▄░█░░█░░░░░░░░█░░░░░░░░░█░░░░░░█░░░█░░█░░░░░░█▀▄░█░░░░█░░░░░░░
#    █▀▀▀░░░█░░░░░░█▀▀▀█░░█░▀▄█░░█▀▀▀░░░░░█░░░░░░░░░█▀▀▀░░░█░░░█░░█▀▀▀░░░█░▀▄█░░░░█░░░░░░░
#    █░░░░░░█▄▄▄▄░░█░░░█░░█░░▀█░░█▄▄▄▄░░░░█░░░░░░░░░█▄▄▄▄░░░▀▄▀░░░█▄▄▄▄░░█░░▀█░░░░█░░░░░░░
#    
  planet_event:
    - meta_scope: event
    # Matches trigger match
    - match: '(trigger){{equals_open_brace}}'
      captures:
        1: keyword.defined.block.constant
        2: sign.equals
        3: brace.open
      push: 'Packages/Stellaris/hidden/planet_condition.sublime-syntax'

    - match: '(desc){{equals_open_brace}}'
      captures:
        1: keyword.defined.block.constant
        2: sign.equals
        3: brace.open
      push: planet_event

    # Matches immediate block
    - match: '(immediate){{equals_open_brace}}'
      captures:
        1: keyword.defined.block.constant
        2: sign.equals
        3: brace.open
      push: 'Packages/Stellaris/hidden/planet_effect.sublime-syntax'

    ## Matches Option block
    - match: '(option){{equals_open_brace}}'
      captures:
        1: keyword.defined.block.constant
        2: sign.equals
        3: brace.open
      push:
        - meta_scope: effect planet
        - include: option_name
        - match: '(trigger){{equals_open_brace}}'
          captures:
            1: keyword.defined.block.constant
            2: sign.equals
            3: brace.open
          push: 'Packages/Stellaris/hidden/planet_condition.sublime-syntax'
        - include: 'Packages/Stellaris/hidden/planet_effect.sublime-syntax'

    - include: general_event

#    █▀▀▀▀░░█░░░█░░█▀▀▀▀░░█▄░░█░░▀▀█▀▀░░░░░
#    █░░░░░░█░░░█░░█░░░░░░█▀▄░█░░░░█░░░░░░░
#    █▀▀▀░░░█░░░█░░█▀▀▀░░░█░▀▄█░░░░█░░░░░░░
#    █▄▄▄▄░░░▀▄▀░░░█▄▄▄▄░░█░░▀█░░░░█░░░░░░░

  pop_event:
    - meta_scope: event
    # Matches trigger match
    - match: '(trigger){{equals_open_brace}}'
      captures:
        1: keyword.defined.block.constant
        2: sign.equals
        3: brace.open
      push: 'Packages/Stellaris/hidden/pop_condition.sublime-syntax'

    - match: '(desc){{equals_open_brace}}'
      captures:
        1: keyword.defined.block.constant
        2: sign.equals
        3: brace.open
      push: pop_event
      
    # Matches immediate block
    - match: '(immediate){{equals_open_brace}}'
      captures:
        1: keyword.defined.block.constant
        2: sign.equals
        3: brace.open
      push: 'Packages/Stellaris/hidden/pop_effect.sublime-syntax'
    ## Matches Option block
    - match: '(option){{equals_open_brace}}'
      captures:
        1: keyword.defined.block.constant
        2: sign.equals
        3: brace.open
      push:
        - meta_scope: effect pop
        - include: option_name
        - match: '(trigger){{equals_open_brace}}'
          captures:
            1: keyword.defined.block.constant
            2: sign.equals
            3: brace.open
          push: 'Packages/Stellaris/hidden/pop_condition.sublime-syntax'
        - include: 'Packages/Stellaris/hidden/pop_effect.sublime-syntax'

    - include: general_event

#    █▀▀█▄░░█▀▀▀█░░█▀▀█▄░░░░░░░█▀▀▀▀░░▄█▀█▄░░▄█▀█▄░░▀▀█▀▀░░▀▀█▀▀░░█▀▀▀█░░█▄░░█░░░░░░░█▀▀▀▀░░█░░░█░░█▀▀▀▀░░█▄░░█░░▀▀█▀▀
#    █░░▄█░░█░░░█░░█░░▄█░░░░░░░█░░░░░░█░░░█░░█░░░▀░░░░█░░░░░░█░░░░█░░░█░░█▀▄░█░░░░░░░█░░░░░░█░░░█░░█░░░░░░█▀▄░█░░░░█░░
#    █▀▀▀░░░█░░░█░░█▀▀▀░░░░░░░░█▀▀▀░░░█▀▀▀█░░█░░░▄░░░░█░░░░░░█░░░░█░░░█░░█░▀▄█░░░░░░░█▀▀▀░░░█░░░█░░█▀▀▀░░░█░▀▄█░░░░█░░
#    █░░░░░░█▄▄▄█░░█░░░░░░░░░░░█░░░░░░█░░░█░░▀█▄█▀░░░░█░░░░▄▄█▄▄░░█▄▄▄█░░█░░▀█░░░░░░░█▄▄▄▄░░░▀▄▀░░░█▄▄▄▄░░█░░▀█░░░░█░░

  pop_faction_event:
    - meta_scope: event
    # Matches trigger match
    - match: '(trigger){{equals_open_brace}}'
      captures:
        1: keyword.defined.block.constant
        2: sign.equals
        3: brace.open
      push: 'Packages/Stellaris/hidden/pop_faction_condition.sublime-syntax'

    - match: '(desc){{equals_open_brace}}'
      captures:
        1: keyword.defined.block.constant
        2: sign.equals
        3: brace.open
      push: pop_faction_event
      
    # Matches immediate block
    - match: '(immediate){{equals_open_brace}}'
      captures:
        1: keyword.defined.block.constant
        2: sign.equals
        3: brace.open
      push: 'Packages/Stellaris/hidden/pop_faction_effect.sublime-syntax'
    ## Matches Option block
    - match: '(option){{equals_open_brace}}'
      captures:
        1: keyword.defined.block.constant
        2: sign.equals
        3: brace.open
      push:
        - meta_scope: effect pop_faction
        - include: option_name
        - match: '(trigger){{equals_open_brace}}'
          captures:
            1: keyword.defined.block.constant
            2: sign.equals
            3: brace.open
          push: 'Packages/Stellaris/hidden/pop_faction_condition.sublime-syntax'
        - include: 'Packages/Stellaris/hidden/pop_faction_effect.sublime-syntax'
    
    - include: general_event



#   █▀▀▀▀░░█░░░░░░█▀▀▀▀░░█▀▀▀▀░░▀▀█▀▀░░░░░░░█▀▀▀▀░░█░░░█░░█▀▀▀▀░░█▄░░█░░▀▀█▀▀
#   █░░░░░░█░░░░░░█░░░░░░█░░░░░░░░█░░░░░░░░░█░░░░░░█░░░█░░█░░░░░░█▀▄░█░░░░█░░
#   █▀▀▀░░░█░░░░░░█▀▀▀░░░█▀▀▀░░░░░█░░░░░░░░░█▀▀▀░░░█░░░█░░█▀▀▀░░░█░▀▄█░░░░█░░
#   █░░░░░░█▄▄▄▄░░█▄▄▄▄░░█▄▄▄▄░░░░█░░░░░░░░░█▄▄▄▄░░░▀▄▀░░░█▄▄▄▄░░█░░▀█░░░░█░░

  fleet_event:
    - meta_scope: event
    # Matches trigger match
    - match: '(trigger){{equals_open_brace}}'
      captures:
        1: keyword.defined.block.constant
        2: sign.equals
        3: brace.open
      push: 'Packages/Stellaris/hidden/fleet_condition.sublime-syntax'

    - match: '(desc){{equals_open_brace}}'
      captures:
        1: keyword.defined.block.constant
        2: sign.equals
        3: brace.open
      push: fleet_event
      
    # Matches immediate block
    - match: '(immediate){{equals_open_brace}}'
      captures:
        1: keyword.defined.block.constant
        2: sign.equals
        3: brace.open
      push: 'Packages/Stellaris/hidden/fleet_effect.sublime-syntax'
    ## Matches Option block
    - match: '(option){{equals_open_brace}}'
      captures:
        1: keyword.defined.block.constant
        2: sign.equals
        3: brace.open
      push:
        - meta_scope: effect fleet
        - include: option_name
        - match: '(trigger){{equals_open_brace}}'
          captures:
            1: keyword.defined.block.constant
            2: sign.equals
            3: brace.open
          push: 'Packages/Stellaris/hidden/fleet_condition.sublime-syntax'
        - include: 'Packages/Stellaris/hidden/fleet_effect.sublime-syntax'
    - include: general_event
 
 
#  ▄█▀█▄░░█░░░█░░▀▀█▀▀░░█▀▀█▄░░░░░░░█▀▀▀▀░░█░░░█░░█▀▀▀▀░░█▄░░█░░▀▀█▀▀
#  █▄▄░▀░░█░░░█░░░░█░░░░█░░▄█░░░░░░░█░░░░░░█░░░█░░█░░░░░░█▀▄░█░░░░█░░
#  ▄░▀▀█░░█▀▀▀█░░░░█░░░░█▀▀▀░░░░░░░░█▀▀▀░░░█░░░█░░█▀▀▀░░░█░▀▄█░░░░█░░
#  ▀█▄█▀░░█░░░█░░▄▄█▄▄░░█░░░░░░░░░░░█▄▄▄▄░░░▀▄▀░░░█▄▄▄▄░░█░░▀█░░░░█░░


  ship_event:
    - meta_scope: event
    # Matches trigger match
    - match: '(trigger){{equals_open_brace}}'
      captures:
        1: keyword.defined.block.constant
        2: sign.equals
        3: brace.open
      push: 'Packages/Stellaris/hidden/ship_condition.sublime-syntax'

    - match: '(desc){{equals_open_brace}}'
      captures:
        1: keyword.defined.block.constant
        2: sign.equals
        3: brace.open
      push: ship_event
      
    # Matches immediate block
    - match: '(immediate){{equals_open_brace}}'
      captures:
        1: keyword.defined.block.constant
        2: sign.equals
        3: brace.open
      push: 'Packages/Stellaris/hidden/ship_effect.sublime-syntax'
    ## Matches Option block
    - match: '(option){{equals_open_brace}}'
      captures:
        1: keyword.defined.block.constant
        2: sign.equals
        3: brace.open
      push:
        - meta_scope: effect ship
        - include: option_name
        - match: '(trigger){{equals_open_brace}}'
          captures:
            1: keyword.defined.block.constant
            2: sign.equals
            3: brace.open
          push: 'Packages/Stellaris/hidden/ship_condition.sublime-syntax'

        - include: 'Packages/Stellaris/hidden/ship_effect.sublime-syntax'
    - include: general_event 
  option_name:
    - match: '(name){{equals_value_with_dots}}'
      captures:
        1: keyword.defined.value
        2: sign.equals
        3: value.user.defined

    - match: '(name)"'
      captures:
        1: keyword.defined.value
        2: sign.equals
        3: value.localised
      push: localised
  

#
#     ▄█▀█▄░░█▄░░█░░█▀▀▀█░░█▄░▄█░░▄█▀█▄░░█░░░░░░█░░░█
#     █░░░█░░█▀▄░█░░█░░░█░░█░█░█░░█░░░█░░█░░░░░░▀█▄█▀
#     █▀▀▀█░░█░▀▄█░░█░░░█░░█░░░█░░█▀▀▀█░░█░░░░░░░░█░░
#     █░░░█░░█░░▀█░░█▄▄▄█░░█░░░█░░█░░░█░░█▄▄▄▄░░░░█░░
#
  anomaly_category:
    - meta_scope: anomaly
    - match: '(spawn_chance|default|potential){{equals_open_brace}}'
      captures:
        1: keyword.defined.block.constant
        2: sign.equals
        3: brace.open
      push: 'Packages/Stellaris/hidden/planet_condition.sublime-syntax'

    - match: '(on_spawn){{equals_open_brace}}'
      captures:
        1: keyword.defined.block.constant
        2: sign.equals
        3: brace.open
      push: 'Packages/Stellaris/hidden/planet_effect.sublime-syntax'

    - match: '(on_success|on_fail|on_critical_fail){{equals_open_brace}}'
      captures:
        1: keyword.defined.block.constant
        2: sign.equals
        3: brace.open    
      push: 'Packages/Stellaris/hidden/ship_effect.sublime-syntax'

    - match: '(level|risk|key|desc|picture){{equals_value_with_dots}}'
      captures:
        1: keyword.defined.value
        2: sign.equals
        3: value.user.defined

    - match: '(level|risk|key|desc|picture)"'
      captures:
        1: keyword.defined.value
        2: sign.equals
        3: value.localised
      push: localised
    - include: unknown
    - include: eat_end_brace

  comment:
    - match: '#'
      push:
        - meta_scope: comment
        - match: '\n'
          pop: true

  unknown:
      #Unknown scope matches
  - match: '{{user_keyword}}\s*(=)\s*(-?(?:\w|\.|:)+)'
    captures:
      1: keyword.user.defined.value
      2: sign.equals
      3: value.user.defined

  - match: '{{user_keyword}}\s*(=)\s*"'
    captures:
      1: keyword.user.defined.value
      2: sign.equals
      3: value.localised
    push: localised

  #Unknown scope matches
  - match: '{{user_keyword}}\s*(=)\s*(@(?:\w|\.|:)+)'
    captures:
      1: keyword.user.defined.value
      2: sign.equals
      3: value.user.defined.constant

  - match: '{{user_keyword}}{{equals_open_brace}}'
    captures:
      1: keyword.user.defined.block
      2: sign.equals
      3: brace.open
    push: general_event

  - match: '\w+'
    scope: 'value.user.defined'
  #anomaly:
  #anomaly_category:
